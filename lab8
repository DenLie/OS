#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <wait.h>
#include <stdlib.h>
#include <time.h>
#include <sys/mman.h>
void parent_handler(int sig){
	printf("Parent signal_handler\n");
	
}
void children_handler(int sig){
    
    if(getppid()+1==getpid()){
        printf("Child first_handler\n");
        
    } 
     if (getppid()+2==getpid()){
        printf("Child second_handler\n");
        
    }
}

int main(){
        signal(SIGUSR2,parent_handler);
        signal(SIGUSR1,children_handler);
        int N=2;
        int *p=mmap(NULL,N*sizeof(int), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, 0, 0);
        pid_t pid, pid2;
        pid=fork();
        
        if (pid == 0){
                signal(SIGUSR1,children_handler);
                p[0]=getpid();
                
        }

        if (pid > 0){
               
                pid2=fork();
        }
        
            if (pid2 == 0){
                    signal(SIGUSR1,children_handler); 
                    p[1]=getpid();
            }
            
            if(pid == 0){
            
            
            
            
            kill(getppid(),SIGUSR2);
        }  else {   //Parent process
                
                
                if(pid > 0){
                    if (pid2 == 0){
                 
                        kill(getppid(),SIGUSR2);
                            
                    } else {
                        
                        kill(p[0],SIGUSR1);
                        
                        sleep(3);
                        
                        kill(p[1],SIGUSR1);
                        sleep(3);
                        
                    }
                    
                }    
        }
}
